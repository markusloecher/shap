bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
# Power Study sIMULATIONS RUN EARLIER:
load("shap_avs.rda")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
library(ranger)
library(ranger)
library(titanic)
naRows = is.na(titanic_train$Age)
data2=titanic_train[!naRows,]
?ranger
library(titanic)
library(ranger)
naRows = is.na(titanic_train$Age)
data2=titanic_train[!naRows,]
rf1 =ranger(Survived ~ Age + Sex + Pclass + PassengerId, data=data2, ntree=100,importance=TRUE,mtry=2, keep.inbag=TRUE)
library(titanic)
library(ranger)
naRows = is.na(titanic_train$Age)
data2=titanic_train[!naRows,]
rf1 =ranger(Survived ~ Age + Sex + Pclass + PassengerId, data=data2, num.trees=100,mtry=2)
rf1$prediction.error
library(titanic)
library(ranger)
naRows = is.na(titanic_train$Age)
data2=titanic_train[!naRows,]
rf1 =ranger(Survived ~ Age + Sex + Pclass + PassengerId, data=data2, num.trees=100,mtry=2)
rf2 =ranger(Survived ~ Age + Sex + Pclass , data=data2, num.trees=100,mtry=2)
rf1$prediction.error
rf2$prediction.error
oob1 = round(rf1$prediction.error,3)
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
?devtools::load_all
bookdown::render_book("index.Rmd")
ggplot(shap, aes(x=Y_train2, y=shap, fill=bag)) + geom_boxplot() + facet_wrap(~ feature)
library(ggplot2)
ggplot(shap, aes(x=Y_train2, y=shap, fill=bag)) + geom_boxplot() + facet_wrap(~ feature)
load("shap_SHAP_TitanicRegV3_QW.rda")
getwd()
load("../shap_SHAP_TitanicRegV3_QW.rda")
ggplot(shap, aes(x=Y_train2, y=shap, fill=bag)) + geom_boxplot() + facet_wrap(~ feature)
View(shap)
?tapply
?split
View(shap)
shap2 = split(shap$shap, shap[,-1])
shap_scaled = lapply(shap2,scale)
shap_scaled = unsplit(lapply(shap2,scale), g)
g=shap[,-1]
shap_scaled = unsplit(lapply(shap2,scale), g)
shap$g= apply(shap[,-1],paste0,collapse="-")
shap$g= apply(shap[,-1],1,paste0,collapse="-")
unique(shap$g)
shap_scaled = shap
shap_scaled = shap
for (g in unique(shap$g)) {
jj = (g == shap$g)
shap_scaled[jj,2:4] = scale(shap[jj,2:4])
}
shap_scaled = shap
for (g in unique(shap$g)) {
jj = (g == shap$g)
shap_scaled[jj,1] = scale(shap[jj,1])
}
ggplot(shap_scaled, aes(x=Y_train2, y=shap, fill=bag)) + geom_boxplot() + facet_wrap(~ feature)
shap$g= apply(shap[,c("bag", "feature")],1,paste0,collapse="-")
shap_scaled = shap
for (g in unique(shap$g)) {
jj = (g == shap$g)
shap_scaled[jj,1] = scale(shap[jj,1])
}
ggplot(shap_scaled, aes(x=Y_train2, y=shap, fill=bag)) + geom_boxplot() + facet_wrap(~ feature)
library(ggplot2)
load("data/shap_SHAP_TitanicRegV3.rda")
shap$g= apply(shap[,c("bag", "feature")],1,paste0,collapse="-")
# shap2 = split(shap$shap, g)
# shap_scaled = unsplit(lapply(shap2,scale), g)
shap_scaled = shap
for (g in unique(shap$bag)) {
jj = (g == shap$bag)
shap_scaled[jj,1] = scale(shap[jj,1])
}
ggplot(shap_scaled, aes(x=Y_train2, y=shap, fill=bag)) + geom_boxplot() + facet_wrap(~ feature)
?m
?scale
library(ggplot2)
load("data/shap_SHAP_TitanicRegV3.rda")
shap$g= apply(shap[,c("bag", "feature")],1,paste0,collapse="-")
# shap2 = split(shap$shap, g)
# shap_scaled = unsplit(lapply(shap2,scale), g)
shap_scaled = shap
for (g in unique(shap$bag)) {
jj = (g == shap$bag)
shap_scaled[jj,1] = scale(shap[jj,FALSE,1])
}
library(ggplot2)
load("data/shap_SHAP_TitanicRegV3.rda")
shap$g= apply(shap[,c("bag", "feature")],1,paste0,collapse="-")
# shap2 = split(shap$shap, g)
# shap_scaled = unsplit(lapply(shap2,scale), g)
shap_scaled = shap
for (g in unique(shap$bag)) {
jj = (g == shap$bag)
shap_scaled[jj,1] = scale(shap[jj,1],FALSE)
}
ggplot(shap_scaled, aes(x=Y_train2, y=shap, fill=bag)) + geom_boxplot() + facet_wrap(~ feature)
library(ggplot2)
load("data/shap_SHAP_TitanicRegV3.rda")
shap$g= apply(shap[,c("bag", "feature")],1,paste0,collapse="-")
# shap2 = split(shap$shap, g)
# shap_scaled = unsplit(lapply(shap2,scale), g)
shap_scaled = shap
for (g in unique(shap$bag)) {
jj = (g == shap$bag)
shap_scaled[jj,1] = scale(shap[jj,1],FALSE, IQR(shap[jj,1]))
}
ggplot(shap_scaled, aes(x=Y_train2, y=shap, fill=bag)) + geom_boxplot() + facet_wrap(~ feature)
library(ggplot2)
load("data/shap_SHAP_TitanicRegV3.rda")
shap$g= apply(shap[,c("bag", "feature")],1,paste0,collapse="-")
# shap2 = split(shap$shap, g)
# shap_scaled = unsplit(lapply(shap2,scale), g)
shap_scaled = shap
for (g in unique(shap$bag)) {
jj = (g == shap$bag)
shap_scaled[jj,1] = scale(shap[jj,1],FALSE, quantile(shap[jj,1],0.8))# IQR(shap[jj,1]))
}
ggplot(shap_scaled, aes(x=Y_train2, y=shap, fill=bag)) + geom_boxplot() + facet_wrap(~ feature)
library(ggplot2)
load("data/shap_SHAP_TitanicRegV3.rda")
#shap$g= apply(shap[,c("bag", "feature")],1,paste0,collapse="-")
shap = subset(shap, bag!="oob3")
# shap2 = split(shap$shap, g)
# shap_scaled = unsplit(lapply(shap2,scale), g)
shap_scaled = shap
for (g in unique(shap$bag)) {
jj = (g == shap$bag)
shap_scaled[jj,1] = scale(shap[jj,1],FALSE, quantile(shap[jj,1],0.8))# IQR(shap[jj,1]))
}
ggplot(shap_scaled, aes(x=Y_train2, y=shap, fill=bag)) + geom_boxplot() + facet_wrap(~ feature)
library(reticulate)
library(titanic)
library(ranger)
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, cache = TRUE, fig.width = 7, fig.height = 6)
bookdown::render_book("index.Rmd")
shap_oob_avg_hat = shap_oob_avg
for (j in 1:4){
fit = lm(shap_oob_avg[,j] ~ shap_inbag_avg[,j] - 1)
shap_oob_avg_hat[,j] = fit$fitted.values
}
par(mfrow=c(1,3))
boxplot(shap_inbag_avg)
boxplot(shap_oob_avg)
boxplot(shap_oob_avg_hat)
shap_oob_avg_hat = shap_oob_avg
for (j in 1:4){
fit = lm(shap_oob_avg[,j] ~ shap_inbag_avg[,j] - 1)
shap_oob_avg_hat[,j] = fit$fitted.values
}
par(mfrow=c(1,3))
boxplot(shap_inbag_avg, col = "darkred");grid()
boxplot(shap_oob_avg, col = "darkblue");grid()
boxplot(shap_oob_avg_hat, col = "darkgreen");grid()
shap_oob_avg_hat = shap_oob_avg
for (j in 1:4){
fit = lm(shap_oob_avg[,j] ~ shap_inbag_avg[,j] - 1)
shap_oob_avg_hat[,j] = fit$fitted.values
}
par(mfrow=c(1,3))
boxplot(shap_inbag_avg, col = "darkred", main = "inbag", ylab = "SHAP");grid()
boxplot(shap_oob_avg, col = "darkblue", main = "oob");grid()
boxplot(shap_oob_avg_hat, col = "darkgreen", main = "oob smoothed");grid()
bookdown::render_book("index.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate) # qi: note: need to reload python packages into miniconda,e.g. py_install("pandas")
WIDTH = 5
HEIGHT = 5
shap_vals_oob=py$shap_vals_oob
shap_vals_in=py$shap_vals_in
shap_avs_oob=py$shap_avs_oob
shap_avs_in=py$shap_avs_in
ft_importances= py$ft_importances
allDFs=py$allDFs
n=py$n
y_train=py$y_train
# qi: question: should we set the y axis to be the same scale for comparison reason?
par(mfrow=c(1,2),oma = c(0, 0, 2, 0))
boxplot(shap_avs_oob,main = 'OOB')
boxplot(shap_avs_in, main = 'Inbag')
mtext('Power Simulation, inoutbag = True', outer = TRUE, cex = 1.5)
shap_avs = py$shap_avs
ft_importances = py$ft_importances
par(mfrow=c(1,2),oma = c(0, 0, 2, 0))
boxplot(shap_avs,main = 'shap_avs')
boxplot(ft_importances,main = 'ft_importances')
mtext('Power Simulation, inoutbag = False', outer = TRUE, cex = 1.5)
save(shap_avs_oob, shap_avs_in, shap_avs, file = "SHAP_bias/data/Simulation1_power.rda")
shap_avs0 = py$shap_avs0
ft_importances0 = py$ft_importances0
par(mfrow=c(1,2),oma = c(0, 0, 2, 0))
boxplot(shap_avs0,main='shap_avs0')
boxplot(ft_importances0,main = 'ft_importances0')
mtext('Null Simulation, inoutbag = False', outer = TRUE, cex = 1.5)
shap_avs_oob0 = py$shap_avs_oob0
shap_avs_in0  = py$shap_avs_in0
par(mfrow=c(1,2),oma = c(0, 0, 2, 0))
boxplot(shap_avs_oob0,main='shap_avs_oob0')
boxplot(shap_avs_in0,main = 'shap_avs_in0')
mtext('Null Simulation, inoutbag = True', outer = TRUE, cex = 1.5)
save(shap_avs_oob0, shap_avs_in0, shap_avs0, file = "SHAP_bias/data/Simulation1_null.rda")
load("C:/Users/loecherm/Nextcloud2/SHKs/QiWu/RStudio/SHAP_bias/data/Simulation1_null.rda")
load("C:/Users/loecherm/Nextcloud2/SHKs/QiWu/RStudio/SHAP_bias/data/Simulation1_null.rda", verbose = TRUE)
load("C:/Users/loecherm/Nextcloud2/SHKs/QiWu/RStudio/SHAP_bias/data/Simulation1_power.rda", verbose = TRUE)
shap_oob_avg_hat = shap_avs_oob0
for (j in 1:4){
fit = lm(shap_avs_oob0[,j] ~ shap_avs_in0[,j] - 1)
shap_avs_oob0_hat[,j] = fit$fitted.values
}
shap_avs_oob0_hat = shap_avs_oob0
for (j in 1:4){
fit = lm(shap_avs_oob0[,j] ~ shap_avs_in0[,j] - 1)
shap_avs_oob0_hat[,j] = fit$fitted.values
}
par(mfrow=c(1,3))
boxplot(shap_avs_in0, col = "darkred", main = "inbag", ylab = "SHAP");grid()
boxplot(shap_avs_oob0, col = "darkblue", main = "oob");grid()
boxplot(shap_avs_oob0_hat, col = "darkgreen", main = "oob smoothed");grid()
shap_avs_oob_hat = shap_avs_oob
for (j in 1:4){
fit = lm(shap_avs_oob[,j] ~ shap_avs_in[,j] - 1)
shap_avs_oob_hat[,j] = fit$fitted.values
}
par(mfrow=c(1,3))
boxplot(shap_avs_in, col = "darkred", main = "inbag", ylab = "SHAP");grid()
boxplot(shap_avs_oob, col = "darkblue", main = "oob");grid()
boxplot(shap_avs_oob_hat, col = "darkgreen", main = "oob smoothed");grid()
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
